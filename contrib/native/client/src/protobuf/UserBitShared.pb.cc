// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserBitShared.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserBitShared.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace exec {
namespace shared {

namespace {

const ::google::protobuf::Descriptor* UserCredentials_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCredentials_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryId_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrillPBError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrillPBError_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParsingError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParsingError_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordBatchDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordBatchDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* NamePart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NamePart_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NamePart_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SerializedField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedField_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcChannel_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_UserBitShared_2eproto() {
  protobuf_AddDesc_UserBitShared_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UserBitShared.proto");
  GOOGLE_CHECK(file != NULL);
  UserCredentials_descriptor_ = file->message_type(0);
  static const int UserCredentials_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCredentials, user_name_),
  };
  UserCredentials_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserCredentials_descriptor_,
      UserCredentials::default_instance_,
      UserCredentials_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCredentials, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCredentials, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCredentials));
  QueryId_descriptor_ = file->message_type(1);
  static const int QueryId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryId, part1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryId, part2_),
  };
  QueryId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryId_descriptor_,
      QueryId::default_instance_,
      QueryId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryId));
  DrillPBError_descriptor_ = file->message_type(2);
  static const int DrillPBError_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrillPBError, error_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrillPBError, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrillPBError, error_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrillPBError, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrillPBError, parsing_error_),
  };
  DrillPBError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrillPBError_descriptor_,
      DrillPBError::default_instance_,
      DrillPBError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrillPBError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrillPBError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrillPBError));
  ParsingError_descriptor_ = file->message_type(3);
  static const int ParsingError_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingError, start_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingError, start_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingError, end_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingError, end_row_),
  };
  ParsingError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParsingError_descriptor_,
      ParsingError::default_instance_,
      ParsingError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParsingError));
  RecordBatchDef_descriptor_ = file->message_type(4);
  static const int RecordBatchDef_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordBatchDef, record_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordBatchDef, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordBatchDef, is_selection_vector_2_),
  };
  RecordBatchDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordBatchDef_descriptor_,
      RecordBatchDef::default_instance_,
      RecordBatchDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordBatchDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordBatchDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordBatchDef));
  NamePart_descriptor_ = file->message_type(5);
  static const int NamePart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamePart, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamePart, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamePart, child_),
  };
  NamePart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NamePart_descriptor_,
      NamePart::default_instance_,
      NamePart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamePart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamePart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NamePart));
  NamePart_Type_descriptor_ = NamePart_descriptor_->enum_type(0);
  SerializedField_descriptor_ = file->message_type(6);
  static const int SerializedField_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedField, major_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedField, name_part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedField, child_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedField, value_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedField, var_byte_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedField, group_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedField, buffer_length_),
  };
  SerializedField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SerializedField_descriptor_,
      SerializedField::default_instance_,
      SerializedField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SerializedField));
  RpcChannel_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UserBitShared_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCredentials_descriptor_, &UserCredentials::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryId_descriptor_, &QueryId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrillPBError_descriptor_, &DrillPBError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParsingError_descriptor_, &ParsingError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordBatchDef_descriptor_, &RecordBatchDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NamePart_descriptor_, &NamePart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SerializedField_descriptor_, &SerializedField::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UserBitShared_2eproto() {
  delete UserCredentials::default_instance_;
  delete UserCredentials_reflection_;
  delete QueryId::default_instance_;
  delete QueryId_reflection_;
  delete DrillPBError::default_instance_;
  delete DrillPBError_reflection_;
  delete ParsingError::default_instance_;
  delete ParsingError_reflection_;
  delete RecordBatchDef::default_instance_;
  delete RecordBatchDef_reflection_;
  delete NamePart::default_instance_;
  delete NamePart_reflection_;
  delete SerializedField::default_instance_;
  delete SerializedField_reflection_;
}

void protobuf_AddDesc_UserBitShared_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_Types_2eproto();
  ::exec::protobuf_AddDesc_Coordination_2eproto();
  ::exec::protobuf_AddDesc_SchemaDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023UserBitShared.proto\022\013exec.shared\032\013Type"
    "s.proto\032\022Coordination.proto\032\017SchemaDef.p"
    "roto\"$\n\017UserCredentials\022\021\n\tuser_name\030\001 \001"
    "(\t\"\'\n\007QueryId\022\r\n\005part1\030\001 \001(\020\022\r\n\005part2\030\002 "
    "\001(\020\"\241\001\n\014DrillPBError\022\020\n\010error_id\030\001 \001(\t\022("
    "\n\010endpoint\030\002 \001(\0132\026.exec.DrillbitEndpoint"
    "\022\022\n\nerror_type\030\003 \001(\005\022\017\n\007message\030\004 \001(\t\0220\n"
    "\rparsing_error\030\005 \003(\0132\031.exec.shared.Parsi"
    "ngError\"\\\n\014ParsingError\022\024\n\014start_column\030"
    "\002 \001(\005\022\021\n\tstart_row\030\003 \001(\005\022\022\n\nend_column\030\004"
    " \001(\005\022\017\n\007end_row\030\005 \001(\005\"r\n\016RecordBatchDef\022"
    "\024\n\014record_count\030\001 \001(\005\022+\n\005field\030\002 \003(\0132\034.e"
    "xec.shared.SerializedField\022\035\n\025is_selecti"
    "on_vector_2\030\003 \001(\010\"\205\001\n\010NamePart\022(\n\004type\030\001"
    " \001(\0162\032.exec.shared.NamePart.Type\022\014\n\004name"
    "\030\002 \001(\t\022$\n\005child\030\003 \001(\0132\025.exec.shared.Name"
    "Part\"\033\n\004Type\022\010\n\004NAME\020\000\022\t\n\005ARRAY\020\001\"\351\001\n\017Se"
    "rializedField\022%\n\nmajor_type\030\001 \001(\0132\021.comm"
    "on.MajorType\022(\n\tname_part\030\002 \001(\0132\025.exec.s"
    "hared.NamePart\022+\n\005child\030\003 \003(\0132\034.exec.sha"
    "red.SerializedField\022\023\n\013value_count\030\004 \001(\005"
    "\022\027\n\017var_byte_length\030\005 \001(\005\022\023\n\013group_count"
    "\030\006 \001(\005\022\025\n\rbuffer_length\030\007 \001(\005*5\n\nRpcChan"
    "nel\022\017\n\013BIT_CONTROL\020\000\022\014\n\010BIT_DATA\020\001\022\010\n\004US"
    "ER\020\002B.\n\033org.apache.drill.exec.protoB\rUse"
    "rBitSharedH\001", 1012);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserBitShared.proto", &protobuf_RegisterTypes);
  UserCredentials::default_instance_ = new UserCredentials();
  QueryId::default_instance_ = new QueryId();
  DrillPBError::default_instance_ = new DrillPBError();
  ParsingError::default_instance_ = new ParsingError();
  RecordBatchDef::default_instance_ = new RecordBatchDef();
  NamePart::default_instance_ = new NamePart();
  SerializedField::default_instance_ = new SerializedField();
  UserCredentials::default_instance_->InitAsDefaultInstance();
  QueryId::default_instance_->InitAsDefaultInstance();
  DrillPBError::default_instance_->InitAsDefaultInstance();
  ParsingError::default_instance_->InitAsDefaultInstance();
  RecordBatchDef::default_instance_->InitAsDefaultInstance();
  NamePart::default_instance_->InitAsDefaultInstance();
  SerializedField::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserBitShared_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserBitShared_2eproto {
  StaticDescriptorInitializer_UserBitShared_2eproto() {
    protobuf_AddDesc_UserBitShared_2eproto();
  }
} static_descriptor_initializer_UserBitShared_2eproto_;
const ::google::protobuf::EnumDescriptor* RpcChannel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcChannel_descriptor_;
}
bool RpcChannel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserCredentials::kUserNameFieldNumber;
#endif  // !_MSC_VER

UserCredentials::UserCredentials()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserCredentials::InitAsDefaultInstance() {
}

UserCredentials::UserCredentials(const UserCredentials& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserCredentials::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCredentials::~UserCredentials() {
  SharedDtor();
}

void UserCredentials::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void UserCredentials::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCredentials::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCredentials_descriptor_;
}

const UserCredentials& UserCredentials::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserBitShared_2eproto();
  return *default_instance_;
}

UserCredentials* UserCredentials::default_instance_ = NULL;

UserCredentials* UserCredentials::New() const {
  return new UserCredentials;
}

void UserCredentials::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCredentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserCredentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserCredentials::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserCredentials::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCredentials::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCredentials* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserCredentials*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCredentials::MergeFrom(const UserCredentials& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCredentials::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCredentials::CopyFrom(const UserCredentials& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCredentials::IsInitialized() const {

  return true;
}

void UserCredentials::Swap(UserCredentials* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserCredentials::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCredentials_descriptor_;
  metadata.reflection = UserCredentials_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryId::kPart1FieldNumber;
const int QueryId::kPart2FieldNumber;
#endif  // !_MSC_VER

QueryId::QueryId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryId::InitAsDefaultInstance() {
}

QueryId::QueryId(const QueryId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryId::SharedCtor() {
  _cached_size_ = 0;
  part1_ = GOOGLE_LONGLONG(0);
  part2_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryId::~QueryId() {
  SharedDtor();
}

void QueryId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryId_descriptor_;
}

const QueryId& QueryId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserBitShared_2eproto();
  return *default_instance_;
}

QueryId* QueryId::default_instance_ = NULL;

QueryId* QueryId::New() const {
  return new QueryId;
}

void QueryId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    part1_ = GOOGLE_LONGLONG(0);
    part2_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 part1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &part1_)));
          set_has_part1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_part2;
        break;
      }

      // optional sfixed64 part2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_part2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &part2_)));
          set_has_part2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 part1 = 1;
  if (has_part1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->part1(), output);
  }

  // optional sfixed64 part2 = 2;
  if (has_part2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->part2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 part1 = 1;
  if (has_part1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->part1(), target);
  }

  // optional sfixed64 part2 = 2;
  if (has_part2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->part2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 part1 = 1;
    if (has_part1()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 part2 = 2;
    if (has_part2()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryId::MergeFrom(const QueryId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_part1()) {
      set_part1(from.part1());
    }
    if (from.has_part2()) {
      set_part2(from.part2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryId::CopyFrom(const QueryId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryId::IsInitialized() const {

  return true;
}

void QueryId::Swap(QueryId* other) {
  if (other != this) {
    std::swap(part1_, other->part1_);
    std::swap(part2_, other->part2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryId_descriptor_;
  metadata.reflection = QueryId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrillPBError::kErrorIdFieldNumber;
const int DrillPBError::kEndpointFieldNumber;
const int DrillPBError::kErrorTypeFieldNumber;
const int DrillPBError::kMessageFieldNumber;
const int DrillPBError::kParsingErrorFieldNumber;
#endif  // !_MSC_VER

DrillPBError::DrillPBError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrillPBError::InitAsDefaultInstance() {
  endpoint_ = const_cast< ::exec::DrillbitEndpoint*>(&::exec::DrillbitEndpoint::default_instance());
}

DrillPBError::DrillPBError(const DrillPBError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrillPBError::SharedCtor() {
  _cached_size_ = 0;
  error_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endpoint_ = NULL;
  error_type_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrillPBError::~DrillPBError() {
  SharedDtor();
}

void DrillPBError::SharedDtor() {
  if (error_id_ != &::google::protobuf::internal::kEmptyString) {
    delete error_id_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
    delete endpoint_;
  }
}

void DrillPBError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrillPBError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrillPBError_descriptor_;
}

const DrillPBError& DrillPBError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserBitShared_2eproto();
  return *default_instance_;
}

DrillPBError* DrillPBError::default_instance_ = NULL;

DrillPBError* DrillPBError::New() const {
  return new DrillPBError;
}

void DrillPBError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error_id()) {
      if (error_id_ != &::google::protobuf::internal::kEmptyString) {
        error_id_->clear();
      }
    }
    if (has_endpoint()) {
      if (endpoint_ != NULL) endpoint_->::exec::DrillbitEndpoint::Clear();
    }
    error_type_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  parsing_error_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrillPBError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_id().data(), this->error_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_endpoint;
        break;
      }

      // optional .exec.DrillbitEndpoint endpoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_type;
        break;
      }

      // optional int32 error_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_type_)));
          set_has_error_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional string message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parsing_error;
        break;
      }

      // repeated .exec.shared.ParsingError parsing_error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parsing_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parsing_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parsing_error;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrillPBError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string error_id = 1;
  if (has_error_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_id().data(), this->error_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->error_id(), output);
  }

  // optional .exec.DrillbitEndpoint endpoint = 2;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->endpoint(), output);
  }

  // optional int32 error_type = 3;
  if (has_error_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error_type(), output);
  }

  // optional string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->message(), output);
  }

  // repeated .exec.shared.ParsingError parsing_error = 5;
  for (int i = 0; i < this->parsing_error_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->parsing_error(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrillPBError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string error_id = 1;
  if (has_error_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_id().data(), this->error_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_id(), target);
  }

  // optional .exec.DrillbitEndpoint endpoint = 2;
  if (has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->endpoint(), target);
  }

  // optional int32 error_type = 3;
  if (has_error_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error_type(), target);
  }

  // optional string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // repeated .exec.shared.ParsingError parsing_error = 5;
  for (int i = 0; i < this->parsing_error_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->parsing_error(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrillPBError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error_id = 1;
    if (has_error_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_id());
    }

    // optional .exec.DrillbitEndpoint endpoint = 2;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoint());
    }

    // optional int32 error_type = 3;
    if (has_error_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_type());
    }

    // optional string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  // repeated .exec.shared.ParsingError parsing_error = 5;
  total_size += 1 * this->parsing_error_size();
  for (int i = 0; i < this->parsing_error_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parsing_error(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrillPBError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrillPBError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrillPBError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrillPBError::MergeFrom(const DrillPBError& from) {
  GOOGLE_CHECK_NE(&from, this);
  parsing_error_.MergeFrom(from.parsing_error_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_id()) {
      set_error_id(from.error_id());
    }
    if (from.has_endpoint()) {
      mutable_endpoint()->::exec::DrillbitEndpoint::MergeFrom(from.endpoint());
    }
    if (from.has_error_type()) {
      set_error_type(from.error_type());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrillPBError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrillPBError::CopyFrom(const DrillPBError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrillPBError::IsInitialized() const {

  return true;
}

void DrillPBError::Swap(DrillPBError* other) {
  if (other != this) {
    std::swap(error_id_, other->error_id_);
    std::swap(endpoint_, other->endpoint_);
    std::swap(error_type_, other->error_type_);
    std::swap(message_, other->message_);
    parsing_error_.Swap(&other->parsing_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrillPBError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrillPBError_descriptor_;
  metadata.reflection = DrillPBError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParsingError::kStartColumnFieldNumber;
const int ParsingError::kStartRowFieldNumber;
const int ParsingError::kEndColumnFieldNumber;
const int ParsingError::kEndRowFieldNumber;
#endif  // !_MSC_VER

ParsingError::ParsingError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParsingError::InitAsDefaultInstance() {
}

ParsingError::ParsingError(const ParsingError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParsingError::SharedCtor() {
  _cached_size_ = 0;
  start_column_ = 0;
  start_row_ = 0;
  end_column_ = 0;
  end_row_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParsingError::~ParsingError() {
  SharedDtor();
}

void ParsingError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParsingError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParsingError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParsingError_descriptor_;
}

const ParsingError& ParsingError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserBitShared_2eproto();
  return *default_instance_;
}

ParsingError* ParsingError::default_instance_ = NULL;

ParsingError* ParsingError::New() const {
  return new ParsingError;
}

void ParsingError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_column_ = 0;
    start_row_ = 0;
    end_column_ = 0;
    end_row_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParsingError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 start_column = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_column_)));
          set_has_start_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_row;
        break;
      }

      // optional int32 start_row = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_row_)));
          set_has_start_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_column;
        break;
      }

      // optional int32 end_column = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_column_)));
          set_has_end_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_row;
        break;
      }

      // optional int32 end_row = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_row_)));
          set_has_end_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParsingError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 start_column = 2;
  if (has_start_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_column(), output);
  }

  // optional int32 start_row = 3;
  if (has_start_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_row(), output);
  }

  // optional int32 end_column = 4;
  if (has_end_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_column(), output);
  }

  // optional int32 end_row = 5;
  if (has_end_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->end_row(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParsingError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 start_column = 2;
  if (has_start_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_column(), target);
  }

  // optional int32 start_row = 3;
  if (has_start_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_row(), target);
  }

  // optional int32 end_column = 4;
  if (has_end_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_column(), target);
  }

  // optional int32 end_row = 5;
  if (has_end_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->end_row(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParsingError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 start_column = 2;
    if (has_start_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_column());
    }

    // optional int32 start_row = 3;
    if (has_start_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_row());
    }

    // optional int32 end_column = 4;
    if (has_end_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_column());
    }

    // optional int32 end_row = 5;
    if (has_end_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_row());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParsingError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParsingError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParsingError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParsingError::MergeFrom(const ParsingError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_column()) {
      set_start_column(from.start_column());
    }
    if (from.has_start_row()) {
      set_start_row(from.start_row());
    }
    if (from.has_end_column()) {
      set_end_column(from.end_column());
    }
    if (from.has_end_row()) {
      set_end_row(from.end_row());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParsingError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingError::CopyFrom(const ParsingError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParsingError::IsInitialized() const {

  return true;
}

void ParsingError::Swap(ParsingError* other) {
  if (other != this) {
    std::swap(start_column_, other->start_column_);
    std::swap(start_row_, other->start_row_);
    std::swap(end_column_, other->end_column_);
    std::swap(end_row_, other->end_row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParsingError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParsingError_descriptor_;
  metadata.reflection = ParsingError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordBatchDef::kRecordCountFieldNumber;
const int RecordBatchDef::kFieldFieldNumber;
const int RecordBatchDef::kIsSelectionVector2FieldNumber;
#endif  // !_MSC_VER

RecordBatchDef::RecordBatchDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordBatchDef::InitAsDefaultInstance() {
}

RecordBatchDef::RecordBatchDef(const RecordBatchDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordBatchDef::SharedCtor() {
  _cached_size_ = 0;
  record_count_ = 0;
  is_selection_vector_2_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordBatchDef::~RecordBatchDef() {
  SharedDtor();
}

void RecordBatchDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordBatchDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordBatchDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordBatchDef_descriptor_;
}

const RecordBatchDef& RecordBatchDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserBitShared_2eproto();
  return *default_instance_;
}

RecordBatchDef* RecordBatchDef::default_instance_ = NULL;

RecordBatchDef* RecordBatchDef::New() const {
  return new RecordBatchDef;
}

void RecordBatchDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    record_count_ = 0;
    is_selection_vector_2_ = false;
  }
  field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordBatchDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 record_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_count_)));
          set_has_record_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field;
        break;
      }

      // repeated .exec.shared.SerializedField field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field;
        if (input->ExpectTag(24)) goto parse_is_selection_vector_2;
        break;
      }

      // optional bool is_selection_vector_2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_selection_vector_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_selection_vector_2_)));
          set_has_is_selection_vector_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordBatchDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 record_count = 1;
  if (has_record_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->record_count(), output);
  }

  // repeated .exec.shared.SerializedField field = 2;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->field(i), output);
  }

  // optional bool is_selection_vector_2 = 3;
  if (has_is_selection_vector_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_selection_vector_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordBatchDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 record_count = 1;
  if (has_record_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->record_count(), target);
  }

  // repeated .exec.shared.SerializedField field = 2;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->field(i), target);
  }

  // optional bool is_selection_vector_2 = 3;
  if (has_is_selection_vector_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_selection_vector_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordBatchDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 record_count = 1;
    if (has_record_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->record_count());
    }

    // optional bool is_selection_vector_2 = 3;
    if (has_is_selection_vector_2()) {
      total_size += 1 + 1;
    }

  }
  // repeated .exec.shared.SerializedField field = 2;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordBatchDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordBatchDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordBatchDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordBatchDef::MergeFrom(const RecordBatchDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_.MergeFrom(from.field_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_count()) {
      set_record_count(from.record_count());
    }
    if (from.has_is_selection_vector_2()) {
      set_is_selection_vector_2(from.is_selection_vector_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordBatchDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordBatchDef::CopyFrom(const RecordBatchDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordBatchDef::IsInitialized() const {

  return true;
}

void RecordBatchDef::Swap(RecordBatchDef* other) {
  if (other != this) {
    std::swap(record_count_, other->record_count_);
    field_.Swap(&other->field_);
    std::swap(is_selection_vector_2_, other->is_selection_vector_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordBatchDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordBatchDef_descriptor_;
  metadata.reflection = RecordBatchDef_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NamePart_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamePart_Type_descriptor_;
}
bool NamePart_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NamePart_Type NamePart::NAME;
const NamePart_Type NamePart::ARRAY;
const NamePart_Type NamePart::Type_MIN;
const NamePart_Type NamePart::Type_MAX;
const int NamePart::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NamePart::kTypeFieldNumber;
const int NamePart::kNameFieldNumber;
const int NamePart::kChildFieldNumber;
#endif  // !_MSC_VER

NamePart::NamePart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NamePart::InitAsDefaultInstance() {
  child_ = const_cast< ::exec::shared::NamePart*>(&::exec::shared::NamePart::default_instance());
}

NamePart::NamePart(const NamePart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NamePart::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  child_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NamePart::~NamePart() {
  SharedDtor();
}

void NamePart::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete child_;
  }
}

void NamePart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NamePart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamePart_descriptor_;
}

const NamePart& NamePart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserBitShared_2eproto();
  return *default_instance_;
}

NamePart* NamePart::default_instance_ = NULL;

NamePart* NamePart::New() const {
  return new NamePart;
}

void NamePart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_child()) {
      if (child_ != NULL) child_->::exec::shared::NamePart::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NamePart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.shared.NamePart.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::shared::NamePart_Type_IsValid(value)) {
            set_type(static_cast< ::exec::shared::NamePart_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_child;
        break;
      }

      // optional .exec.shared.NamePart child = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_child()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NamePart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .exec.shared.NamePart.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .exec.shared.NamePart child = 3;
  if (has_child()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->child(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NamePart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .exec.shared.NamePart.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .exec.shared.NamePart child = 3;
  if (has_child()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->child(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NamePart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .exec.shared.NamePart.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .exec.shared.NamePart child = 3;
    if (has_child()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->child());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NamePart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NamePart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NamePart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NamePart::MergeFrom(const NamePart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_child()) {
      mutable_child()->::exec::shared::NamePart::MergeFrom(from.child());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NamePart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamePart::CopyFrom(const NamePart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamePart::IsInitialized() const {

  return true;
}

void NamePart::Swap(NamePart* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(child_, other->child_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NamePart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NamePart_descriptor_;
  metadata.reflection = NamePart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SerializedField::kMajorTypeFieldNumber;
const int SerializedField::kNamePartFieldNumber;
const int SerializedField::kChildFieldNumber;
const int SerializedField::kValueCountFieldNumber;
const int SerializedField::kVarByteLengthFieldNumber;
const int SerializedField::kGroupCountFieldNumber;
const int SerializedField::kBufferLengthFieldNumber;
#endif  // !_MSC_VER

SerializedField::SerializedField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SerializedField::InitAsDefaultInstance() {
  major_type_ = const_cast< ::common::MajorType*>(&::common::MajorType::default_instance());
  name_part_ = const_cast< ::exec::shared::NamePart*>(&::exec::shared::NamePart::default_instance());
}

SerializedField::SerializedField(const SerializedField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SerializedField::SharedCtor() {
  _cached_size_ = 0;
  major_type_ = NULL;
  name_part_ = NULL;
  value_count_ = 0;
  var_byte_length_ = 0;
  group_count_ = 0;
  buffer_length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SerializedField::~SerializedField() {
  SharedDtor();
}

void SerializedField::SharedDtor() {
  if (this != default_instance_) {
    delete major_type_;
    delete name_part_;
  }
}

void SerializedField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedField_descriptor_;
}

const SerializedField& SerializedField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserBitShared_2eproto();
  return *default_instance_;
}

SerializedField* SerializedField::default_instance_ = NULL;

SerializedField* SerializedField::New() const {
  return new SerializedField;
}

void SerializedField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_major_type()) {
      if (major_type_ != NULL) major_type_->::common::MajorType::Clear();
    }
    if (has_name_part()) {
      if (name_part_ != NULL) name_part_->::exec::shared::NamePart::Clear();
    }
    value_count_ = 0;
    var_byte_length_ = 0;
    group_count_ = 0;
    buffer_length_ = 0;
  }
  child_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SerializedField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.MajorType major_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_major_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_part;
        break;
      }

      // optional .exec.shared.NamePart name_part = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name_part()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_child;
        break;
      }

      // repeated .exec.shared.SerializedField child = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_child;
        if (input->ExpectTag(32)) goto parse_value_count;
        break;
      }

      // optional int32 value_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_count_)));
          set_has_value_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_var_byte_length;
        break;
      }

      // optional int32 var_byte_length = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_var_byte_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &var_byte_length_)));
          set_has_var_byte_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_group_count;
        break;
      }

      // optional int32 group_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_count_)));
          set_has_group_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buffer_length;
        break;
      }

      // optional int32 buffer_length = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffer_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffer_length_)));
          set_has_buffer_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SerializedField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .common.MajorType major_type = 1;
  if (has_major_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->major_type(), output);
  }

  // optional .exec.shared.NamePart name_part = 2;
  if (has_name_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->name_part(), output);
  }

  // repeated .exec.shared.SerializedField child = 3;
  for (int i = 0; i < this->child_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->child(i), output);
  }

  // optional int32 value_count = 4;
  if (has_value_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value_count(), output);
  }

  // optional int32 var_byte_length = 5;
  if (has_var_byte_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->var_byte_length(), output);
  }

  // optional int32 group_count = 6;
  if (has_group_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->group_count(), output);
  }

  // optional int32 buffer_length = 7;
  if (has_buffer_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buffer_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SerializedField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .common.MajorType major_type = 1;
  if (has_major_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->major_type(), target);
  }

  // optional .exec.shared.NamePart name_part = 2;
  if (has_name_part()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->name_part(), target);
  }

  // repeated .exec.shared.SerializedField child = 3;
  for (int i = 0; i < this->child_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->child(i), target);
  }

  // optional int32 value_count = 4;
  if (has_value_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value_count(), target);
  }

  // optional int32 var_byte_length = 5;
  if (has_var_byte_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->var_byte_length(), target);
  }

  // optional int32 group_count = 6;
  if (has_group_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->group_count(), target);
  }

  // optional int32 buffer_length = 7;
  if (has_buffer_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buffer_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SerializedField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.MajorType major_type = 1;
    if (has_major_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->major_type());
    }

    // optional .exec.shared.NamePart name_part = 2;
    if (has_name_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name_part());
    }

    // optional int32 value_count = 4;
    if (has_value_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value_count());
    }

    // optional int32 var_byte_length = 5;
    if (has_var_byte_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->var_byte_length());
    }

    // optional int32 group_count = 6;
    if (has_group_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_count());
    }

    // optional int32 buffer_length = 7;
    if (has_buffer_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffer_length());
    }

  }
  // repeated .exec.shared.SerializedField child = 3;
  total_size += 1 * this->child_size();
  for (int i = 0; i < this->child_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SerializedField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SerializedField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SerializedField::MergeFrom(const SerializedField& from) {
  GOOGLE_CHECK_NE(&from, this);
  child_.MergeFrom(from.child_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major_type()) {
      mutable_major_type()->::common::MajorType::MergeFrom(from.major_type());
    }
    if (from.has_name_part()) {
      mutable_name_part()->::exec::shared::NamePart::MergeFrom(from.name_part());
    }
    if (from.has_value_count()) {
      set_value_count(from.value_count());
    }
    if (from.has_var_byte_length()) {
      set_var_byte_length(from.var_byte_length());
    }
    if (from.has_group_count()) {
      set_group_count(from.group_count());
    }
    if (from.has_buffer_length()) {
      set_buffer_length(from.buffer_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SerializedField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedField::CopyFrom(const SerializedField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedField::IsInitialized() const {

  return true;
}

void SerializedField::Swap(SerializedField* other) {
  if (other != this) {
    std::swap(major_type_, other->major_type_);
    std::swap(name_part_, other->name_part_);
    child_.Swap(&other->child_);
    std::swap(value_count_, other->value_count_);
    std::swap(var_byte_length_, other->var_byte_length_);
    std::swap(group_count_, other->group_count_);
    std::swap(buffer_length_, other->buffer_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SerializedField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedField_descriptor_;
  metadata.reflection = SerializedField_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace shared
}  // namespace exec

// @@protoc_insertion_point(global_scope)
